#include "twi-dw_apb_i2c.h"
#include "picoRTOS.h"

#include <stdint.h>

struct TWI_DW_APB_I2C {
    volatile uint32_t IC_CON;
    volatile uint32_t IC_TAR;
    volatile uint32_t IC_SAR;
    uint32_t RESERVED0;
    volatile uint32_t IC_DATA_CMD;
    volatile uint32_t IC_SS_SCL_HCNT;
    volatile uint32_t IC_SS_SCL_LCNT;
    volatile uint32_t IC_FS_SCL_HCNT;
    volatile uint32_t IC_FS_SCL_LCNT;
    uint32_t RESERVED1[2];
    volatile uint32_t IC_INTR_STAT;
    volatile uint32_t IC_INTR_MASK;
    volatile uint32_t IC_RAW_INTR_STAT;
    volatile uint32_t IC_RX_TL;
    volatile uint32_t IC_TX_TL;
    volatile uint32_t IC_CLR_INTR;
    volatile uint32_t IC_CLR_RX_UNDER;
    volatile uint32_t IC_CLR_RX_OVER;
    volatile uint32_t IC_CLR_TX_OVER;
    volatile uint32_t IC_CLR_RD_REQ;
    volatile uint32_t IC_CLR_TX_ABRT;
    volatile uint32_t IC_CLR_RX_DONE;
    volatile uint32_t IC_CLR_ACTIVITY;
    volatile uint32_t IC_CLR_STOP_DET;
    volatile uint32_t IC_CLR_START_DET;
    volatile uint32_t IC_CLR_GEN_CALL;
    volatile uint32_t IC_ENABLE;
    volatile uint32_t IC_STATUS;
    volatile uint32_t IC_TXFLR;
    volatile uint32_t IC_RXFLR;
    volatile uint32_t IC_SDA_HOLD;
    volatile uint32_t IC_TX_ABRT_SOURCE;
    volatile uint32_t IC_SLV_DATA_NACK_ONLY;
    volatile uint32_t IC_DMA_CR;
    volatile uint32_t IC_DMA_TDLR;
    volatile uint32_t IC_DMA_RDLR;
    volatile uint32_t IC_SDA_SETUP;
    volatile uint32_t IC_ACK_GENERAL_CALL;
    volatile uint32_t IC_ENABLE_STATUS;
    volatile uint32_t IC_FS_SPKLEN;
    uint32_t RESERVED2;
    volatile uint32_t IC_CLR_RESTART_DET;
    uint32_t RESERVED3[19];
    volatile uint32_t IC_COMP_PARAM_1;
    volatile uint32_t IC_COMP_VERSION;
    volatile uint32_t IC_COMP_TYPE;
};

int twi_dw_apb_i2c_init(struct twi *ctx, struct TWI_DW_APB_I2C *base, clock_id_t clkid)
{
    ctx->base = base;
    ctx->clkid = clkid;

    /* enable */

    return 0;
}

int twi_dw_apb_i2c_setup(struct twi *ctx, struct twi_dw_apb_i2c_settings *settings)
{
}
