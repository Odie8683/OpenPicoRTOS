	.syntax unified
	.cpu cortex-m0plus

	#include "picoRTOS_device.h"
	#include "../../lib/arm/cortex-m/macros.S"

	/* Padded and checksummed version of bs2_default.bin */
	.section .boot2, "ax"
	.byte 0x00, 0xb5, 0x32, 0x4b, 0x21, 0x20, 0x58, 0x60
	.byte 0x98, 0x68, 0x02, 0x21, 0x88, 0x43, 0x98, 0x60
	.byte 0xd8, 0x60, 0x18, 0x61, 0x58, 0x61, 0x2e, 0x4b
	.byte 0x00, 0x21, 0x99, 0x60, 0x02, 0x21, 0x59, 0x61
	.byte 0x01, 0x21, 0xf0, 0x22, 0x99, 0x50, 0x2b, 0x49
	.byte 0x19, 0x60, 0x01, 0x21, 0x99, 0x60, 0x35, 0x20
	.byte 0x00, 0xf0, 0x44, 0xf8, 0x02, 0x22, 0x90, 0x42
	.byte 0x14, 0xd0, 0x06, 0x21, 0x19, 0x66, 0x00, 0xf0
	.byte 0x34, 0xf8, 0x19, 0x6e, 0x01, 0x21, 0x19, 0x66
	.byte 0x00, 0x20, 0x18, 0x66, 0x1a, 0x66, 0x00, 0xf0
	.byte 0x2c, 0xf8, 0x19, 0x6e, 0x19, 0x6e, 0x19, 0x6e
	.byte 0x05, 0x20, 0x00, 0xf0, 0x2f, 0xf8, 0x01, 0x21
	.byte 0x08, 0x42, 0xf9, 0xd1, 0x00, 0x21, 0x99, 0x60
	.byte 0x1b, 0x49, 0x19, 0x60, 0x00, 0x21, 0x59, 0x60
	.byte 0x1a, 0x49, 0x1b, 0x48, 0x01, 0x60, 0x01, 0x21
	.byte 0x99, 0x60, 0xeb, 0x21, 0x19, 0x66, 0xa0, 0x21
	.byte 0x19, 0x66, 0x00, 0xf0, 0x12, 0xf8, 0x00, 0x21
	.byte 0x99, 0x60, 0x16, 0x49, 0x14, 0x48, 0x01, 0x60
	.byte 0x01, 0x21, 0x99, 0x60, 0x01, 0xbc, 0x00, 0x28
	.byte 0x00, 0xd0, 0x00, 0x47, 0x12, 0x48, 0x13, 0x49
	.byte 0x08, 0x60, 0x03, 0xc8, 0x80, 0xf3, 0x08, 0x88
	.byte 0x08, 0x47, 0x03, 0xb5, 0x99, 0x6a, 0x04, 0x20
	.byte 0x01, 0x42, 0xfb, 0xd0, 0x01, 0x20, 0x01, 0x42
	.byte 0xf8, 0xd1, 0x03, 0xbd, 0x02, 0xb5, 0x18, 0x66
	.byte 0x18, 0x66, 0xff, 0xf7, 0xf2, 0xff, 0x18, 0x6e
	.byte 0x18, 0x6e, 0x02, 0xbd, 0x00, 0x00, 0x02, 0x40
	.byte 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x07, 0x00
	.byte 0x00, 0x03, 0x5f, 0x00, 0x21, 0x22, 0x00, 0x00
	.byte 0xf4, 0x00, 0x00, 0x18, 0x22, 0x20, 0x00, 0xa0
	.byte 0x00, 0x01, 0x00, 0x10, 0x08, 0xed, 0x00, 0xe0
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x74, 0xb2, 0x4e, 0x7a

	.section .vectors, "ax"
	.global __vectors
__vectors:
	.word __StackTop
	.word Reset_Handler
	.word NMI_Handler
	.word HardFault_Handler
	.word 0 /* reserved */
	.word 0 /* reserved */
	.word 0 /* reserved */
	.word 0 /* reserved */
	.word 0 /* reserved */
	.word 0 /* reserved */
	.word 0 /* reserved */
	.word SVC_Handler
	.word 0 /* reserved */
	.word 0 /* reserved */
	.word PendSV_Handler
	.word SysTick_Handler
	.rept DEVICE_INTERRUPT_VECTOR_COUNT
	.word Default_Handler
	.endr

	.macro ROM_TABLE_LOOKUP code
	movs r0, 0x00000014
	ldrh r0, [r0]
	ldr r1, =\code
	movs r2, 0x00000018
	ldrh r2, [r2]
	blx r2
	.endm

	.macro HOLD_CORE1_IN_BOOTROM
	ldr r0, =(ADDR_SIO + 0x0)
	ldr r0, [r0]
	cmp r0, #0
	beq 1f

	ROM_TABLE_LOOKUP ('W' | ('V' << 8))
	bx r0
1:
	.endm

	.macro RESET_ALL_SPINLOCKS
	movs r0, #0
	movs r1, #32
	ldr r2, =ADDR_SIO + 0x100
1:
	dmb
	stm r2!, {r0}
	subs r1, #1
	bne 1b
	.endm

	.section .init, "ax"

	.thumb_func
	.type Reset_Handler, %function
	.global Reset_Handler
Reset_Handler:
	HOLD_CORE1_IN_BOOTROM

	/* relocate text section if needed */
	ldr r1, =__relocate_text
	cmp r1, #0
	beq .ignore_text_relocation

	/* copy .text to ram */
	COPY_TO_RAM __etext, __text_start__, __text_end__
	COPY_TO_RAM __vectors, __vectors_start__, __vectors_end__

.ignore_text_relocation:
	/* init vectors & stack */
	INIT_VTOR __vectors_start__
	INIT_STACK __StackTop
	/* copy .data section */
	COPY_TO_RAM __sdata, __data_start__, __data_end__
	/* zero .bss section */
	ZERO_RAM __bss_start__, __bss_end__

	/* ensure spinlocks are ready */
	RESET_ALL_SPINLOCKS

	/* run main() */
	ldr r1, =main
	blx r1

	.thumb_func
	.type _exit, %function
	.global _exit
_exit:
	bkpt #0
	b _exit

	/* Weak handlers */
	def_irq_handler NMI_Handler
	def_irq_handler HardFault_Handler
	def_irq_handler SVC_Handler
